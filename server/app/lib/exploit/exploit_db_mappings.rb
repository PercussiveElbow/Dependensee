require 'net/http'
require 'zip'
require 'fileutils'
require 'nokogiri'
require_relative '../../models/exploit'
require_relative '../msg_constants'

class ExploitDbMappings

  def initialize(loc)
    @loc = MsgConstants::BASE_LOC + loc
    if !Rails.env.development? #disable to speed boot
      download_db
      unzip
      parse_and_add
    end
  end

  def download_db
    Logger.new(STDOUT).info"Downloading ExploitDB CVE mappings to: #{@loc}"
    Net::HTTP.start(MsgConstants::EXPLOIT_MAPPING_SITE) do |http|
      resp = http.get(MsgConstants::EXPLOIT_MAPPING_SITE_LOC)
      open(@loc + MsgConstants::EXPLOIT_MAPPING_DOWNLOAD_LOC, "w+") do |file|
        file.write(resp.body.encode("ASCII-8BIT").force_encoding("utf-8"))
      end
    end
  end

  def unzip
    FileUtils.rm_rf @loc + MsgConstants::EXPLOIT_MAPPING_UNZIP_LOC
    FileUtils.mkdir_p @loc + MsgConstants::EXPLOIT_MAPPING_UNZIP_LOC

    Zip::File.open(@loc + MsgConstants::EXPLOIT_MAPPING_DOWNLOAD_LOC) do |zip_file|
      zip_file.each do |entry|
        entry.extract(@loc + MsgConstants::EXPLOIT_MAPPING_UNZIP_LOC + entry.name)
      end
    end
  end

  def parse_and_add
    doc = Nokogiri::HTML(File.read(@loc + MsgConstants::EXPLOIT_MAPPING_UNZIP_LOC+MsgConstants::EXPLOIT_MAPPING_FILE_NAME))
    rows = doc.xpath('//table/tr')
    count = 0
    details = rows.collect do |row|
      detail = {}
      [[:id, 'td[1]/text()'], [:cves, 'td[2]/descendant::*/text()']].each do |name, xpath|
        detail[name] = row.at_xpath(xpath).to_s.strip
      end
      detail[:id] = detail[:id].gsub(/[^0-9,.]/, "")
      detail[:cves] = detail[:cves].gsub('CVE-', '')
      count += 1
      Exploit::new(:edb_id => detail[:id], :cves => [detail[:cves]]).save! if Exploit.where(" '#{detail[:cves]}' = ANY (cves)").empty? if count > 4
    end
  end

end